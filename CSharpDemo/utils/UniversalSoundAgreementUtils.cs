using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CSharpDemo.utils
{
    //万能语音协议工具类
    class UniversalSoundAgreementUtils
    {
        static byte[] aucCRCHi = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40
};
        static byte[] aucCRCLo = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
0x41, 0x81, 0x80, 0x40
};
        //得到文本命令(自定义)
        public static byte[] getTxtCommand(byte lineNo, string content)
        {
            byte[] data = CommonUtils.stringToByte(content);
            int dataLength = data.Length;
            byte[] result = new byte[1024];
            result = textCommandWriteHead(result);
            //命令
            result[5] = 0x26;
            //长度
            result[6] = 0x00;
            result[7] = (byte)(dataLength+4);
            //数据
            //行号
            result[8] = lineNo;
            //显示时间/次数 当这一行的字符数<=8时是时间 ,>8时是次数
            result[9] = 10;
            //颜色 1：红色，2：绿色，3：黄色
            result[10] = 0x02;
            //保留字
            result[11] = 0x00;
            //数据内容
            for (int i=0;i<dataLength; i++)
            {
                result[12 + i] = data[i];
            }           
            //校检码
            result[12+dataLength] = 0x00;
            result[13+dataLength] = 0x00;
            //结束符
            result[14+dataLength] = 0xAF;
            //计算校检码
            result = writeCheckNum(result);
            return result;
        }

        //得到语音命令
        public static byte[] getSoundCommand(string content)
        {
            byte[] result = new byte[1024];
            //帧头
            result[0] = 0xFD;
            //数据区长度(内容长度加2)
            result[1] = 0x00;            
            //数据区
            //命令字
            result[3] = 0x01;
            //命令参数
            result[4] = 0x00;
            //内容
            byte[] data = CommonUtils.stringToByteGB2312(content);
            int dataLength = data.Length;
            result[2] = (byte)(dataLength+2);
            if (null != data && dataLength > 0)
            {
               for(int i =0; i < dataLength; i++)
                {
                    result[5 + i] = data[i];
               }
            }
            return result;
        }

        //设置时间显示行号 lineNo为0时不显示
        public static byte[] setTimeShowLineNo(int lineNo)
        {
            byte[] result = new byte[1024];
            result = textCommandWriteHead(result);
            //命令
            result[5] = 0xF6;
            //长度
            result[6] = 0x00;
            result[7] = 0x03;
            //数据 行数0-4 0为不显示 
            result[8] = (byte)lineNo;
            //两位保留字节
            result[9] = 0x01;
            result[10] = 0x01;
            //校检码
            result[11] = 0x00;
            result[12] = 0x00;
            //结束符
            result[13] = 0xAF;
            //封装校检码
            result = writeCheckNum(result);
            return result;
        }

        //设置彩色广告
        public static byte[] getColourAdvertisement(byte lineNo,byte color,string content)
        {
            byte[] data = CommonUtils.stringToByte(content);
            int dataLength = data.Length;
            byte[] result = new byte[1024];
            result = textCommandWriteHead(result);
            //命令
            result[5] = 0x25;
            //长度
            result[6] = 0x00;
            result[7] = (byte)(dataLength + 3);
            //行号
            result[8] = lineNo;
            //颜色1：红色，2：绿色，3：黄色
            result[9] = color;
            //保留字段
            result[10] = 0x00;
            if(dataLength > 0)
            {
                for(int i = 0; i < dataLength; i++)
                {
                    result[11 + i] = data[i];
                }
            }
            result[11 + dataLength] = 0x00;
            result[12 + dataLength] = 0x00;
            result[13 + dataLength] = 0xAF;
            result = writeCheckNum(result);
            return result;
        }

        //设置普通广告
        public static byte[] getAdvertisement(byte lineNo,string content)
        {
            byte[] data = CommonUtils.stringToByteGB2312(content);
            int dataLength = data.Length;
            byte[] result = new byte[1024];
            result = textCommandWriteHead(result);
            //命令
            result[5] = 0x11;
            //长度
            result[6] = 0x00;
            result[7] = (byte)(dataLength + 1);
            //行号
            result[8] = lineNo;
            if (dataLength > 0)
            {
                for (int i = 0; i < dataLength; i++)
                {
                    result[9 + i] = data[i];
                }
            }
            result[9 + dataLength] = 0x00;
            result[10 + dataLength] = 0x00;
            result[11 + dataLength] = 0xAF;
            result = writeCheckNum(result);
            return result;
        }

        //封装校检码
        public static byte[] writeCheckNum(byte[] data)
        {
            int validLength = CommonUtils.getLength(data)+3;
            if(data == null || validLength < 4)
            {
                return data;
            }
            else
            {
                byte[] needCalcuteData = new byte[validLength - 3];
                for(int i = 0; i < needCalcuteData.Length; i++)
                {
                    needCalcuteData[i] = data[2 + i];
                }
                byte[] checkNum = CRC16(needCalcuteData);
                data[validLength - 3] = checkNum[0];
                data[validLength - 2] = checkNum[1];
                return data;
            }
        }

        //文本命令填充头
        private static byte[] textCommandWriteHead(byte[] data)
        {
            if(data == null || data.Length < 5)
            {
                return data;
            }
            else
            {
                data[0] = 0xAA;
                data[1] = 0x55;
                //保留字
                data[2] = 0x01;
                data[3] = 0x64;
                data[4] = 0x00;
                return data;
            }
        }

        //得到CRC16校检码
        #region  CRC16
        public static byte[] CRC16(byte[] data)
        {
            int len = data.Length;
            if (len > 0)
            {
                ushort crc = 0xFFFF;

                for (int i = 0; i < len; i++)
                {
                    crc = (ushort)(crc ^ (data[i]));
                    for (int j = 0; j < 8; j++)
                    {
                        crc = (crc & 1) != 0 ? (ushort)((crc >> 1) ^ 0xA001) : (ushort)(crc >> 1);
                    }
                }
                byte hi = (byte)((crc & 0xFF00) >> 8);  //高位置
                byte lo = (byte)(crc & 0x00FF);         //低位置

                return new byte[] { hi, lo };
            }
            return new byte[] { 0, 0 };
        }
        #endregion
    }
}
